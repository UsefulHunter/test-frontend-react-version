{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Search","useState","input","setInput","errors","results","state","setState","search","a","fetch","then","res","json","data","useSearch","className","onSubmit","e","preventDefault","onChange","target","value","placeholder","type","map","r","key","id","href","svn_url","name","language","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQA6BA,SAASA,IAAU,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAlBlB,WAAsB,IAAD,EACOF,mBAAS,CAAEG,OAAQ,GAAIC,QAAS,KADvC,mBACZC,EADY,KACLC,EADK,KAGbC,EAAM,uCAAG,WAAMN,GAAN,eAAAO,EAAA,+EAEQC,MAAM,gCAAD,OACUR,EADV,WAEtBS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAJP,OAELC,EAFK,OAMXP,EAAS,CAAEF,QAASS,EAAMV,OAAQ,KANvB,gDAQXG,EAAS,CAAEH,OAAQ,CAAC,EAAD,IAASC,QAAS,KAR1B,yDAAH,sDAYZ,MAAO,CAAED,OAAQE,EAAMF,OAAQC,QAASC,EAAMD,QAASG,UAK3BO,GAApBP,EAFQ,EAERA,OAAQH,EAFA,EAEAA,QAChB,OACE,yBAAKW,UAAU,WACb,0BACEA,UAAU,OACVC,SAAU,SAAAC,GACRA,EAAEC,iBACFX,EAAON,KAGT,2BACEc,UAAU,cACVI,SAAU,SAAAF,GAAC,OAAIf,EAASe,EAAEG,OAAOC,QACjCC,YAAY,wBACZD,MAAOpB,IAET,4BAAQc,UAAU,eAAeQ,KAAK,UAAtC,WAIF,wBAAIR,UAAU,gBACXX,EAAQoB,KAAI,SAAAC,GAAC,OACZ,wBAAIC,IAAKD,EAAEE,IACT,uBAAGZ,UAAU,QAAQa,KAAMH,EAAEI,SAC1BJ,EAAEK,MAEL,8BAAOL,EAAEM,gBAQNC,MA9Df,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAChB,EAAD,QCMckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.01371824.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search />\n    </div>\n  );\n}\n\nfunction useSearch() {\n  const [state, setState] = useState({ errors: [], results: [] });\n\n  const search = async input => {\n    try {\n      const data = await fetch(\n        `https://api.github.com/users/${input}/repos`\n      ).then(res => res.json());\n\n      setState({ results: data, errors: [] });\n    } catch (error) {\n      setState({ errors: [error], results: [] });\n    }\n  };\n\n  return { errors: state.errors, results: state.results, search };\n}\n\nfunction Search() {\n  const [input, setInput] = useState('');\n  const { search, results } = useSearch();\n  return (\n    <div className=\"Content\">\n      <form\n        className=\"form\"\n        onSubmit={e => {\n          e.preventDefault();\n          search(input);\n        }}\n      >\n        <input\n          className=\"form__input\"\n          onChange={e => setInput(e.target.value)}\n          placeholder=\"Enter GitHub username\"\n          value={input}\n        />\n        <button className=\"form__submit\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <ul className=\"Repositories\">\n        {results.map(r => (\n          <li key={r.id}>\n            <a className=\"Links\" href={r.svn_url}>\n              {r.name}\n            </a>\n            <span>{r.language}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}